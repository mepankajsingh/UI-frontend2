---
import { ViewTransitions } from 'astro:transitions';
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';
import LoadingBar from '../components/LoadingBar.jsx';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Discover and compare UI component libraries for your JavaScript projects" } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title} | UI Library Directory</title>
    <meta name="description" content={description} />
    
    <!-- Preload critical assets -->
    <link rel="preload" href="/_astro/index.astro_astro_type_script_index_0_astro.js" as="script" />
    <link rel="preconnect" href="https://tcblwrhrgeaxfpcvmema.supabase.co" />
    
    <!-- Add View Transitions for smoother page navigation -->
    <ViewTransitions />
    
    <!-- Inline critical CSS -->
    <style is:inline>
      /* Critical CSS for initial render */
      body {
        margin: 0;
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        background-color: #f9fafb;
        color: #111827;
      }
      .initial-loader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 3px;
        background-color: #3b82f6;
        z-index: 9999;
        animation: initialLoad 1s ease-out forwards;
        opacity: 1;
        transition: opacity 0.3s ease-out;
      }
      @keyframes initialLoad {
        0% { width: 0; }
        50% { width: 70%; }
        100% { width: 100%; }
      }
    </style>
    
    <script>
      // Hide initial loader after page load
      document.addEventListener('DOMContentLoaded', () => {
        setTimeout(() => {
          const initialLoader = document.querySelector('.initial-loader');
          if (initialLoader) {
            initialLoader.style.opacity = '0';
            setTimeout(() => {
              if (initialLoader.parentNode) {
                initialLoader.parentNode.removeChild(initialLoader);
              }
            }, 300);
          }
        }, 500);
      });
    </script>
  </head>
  <body>
    <!-- Initial loading indicator -->
    <div class="initial-loader"></div>
    
    <!-- React loading bar for navigation -->
    <LoadingBar client:load />
    
    <!-- Top navigation -->
    <Navigation />
    
    <!-- Main content with top padding for the navigation -->
    <main class="container mx-auto px-4 py-8 min-h-[70vh] mt-4">
      <slot />
    </main>
    
    <Footer />
    
    <!-- Defer non-critical JS -->
    <script>
      // Add intersection observer for lazy loading
      document.addEventListener('DOMContentLoaded', () => {
        const lazyImages = document.querySelectorAll('img[loading="lazy"]');
        
        if ('IntersectionObserver' in window) {
          const imageObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                imageObserver.unobserve(img);
              }
            });
          });
          
          lazyImages.forEach(img => imageObserver.observe(img));
        } else {
          // Fallback for browsers without intersection observer
          lazyImages.forEach(img => {
            img.src = img.dataset.src;
          });
        }
      });
    </script>
  </body>
</html>
